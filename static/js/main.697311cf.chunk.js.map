{"version":3,"sources":["assets/hero.png","blog/common/ArticleHeader.jsx","blog/article.routes.js","blog/articles/SNN.jsx","blog/articles/DNN.jsx","blog/articles/CNN.jsx","blog/articles/RNN1.jsx","blog/articles/RNN2.jsx","home/components/JourneyCard.tsx","home/components/TopBar.jsx","home/components/ProjectCard.jsx","home/components/ArticleCard.jsx","home/components/PacmanLoader.jsx","home/sections/HeroSection.jsx","home/sections/SkillsSection.tsx","home/sections/ProjectsSection.jsx","home/sections/ExperienceSection.jsx","home/sections/FooterSection.jsx","home/sections/ArticlesSection.jsx","home/Home.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ArticleHeader","title","backUrl","history","useHistory","isMobile","useMediaQuery","AppBar","position","style","backgroundColor","Toolbar","Grid","container","item","xs","md","display","alignItems","cursor","onClick","push","color","Typography","variant","justifyContent","routes","path","component","props","className","text","language","showLineNumbers","theme","monoBlue","makeStyles","width90","width","marginBottom","links","to","useStyles","cursorPointer","whiteBackground","boxShadow","navLinks","navLinksThin","navLinkText","marginLeft","Home","classes","isMaxWidth600","useState","showDrawer","setShowDrawer","toggleDrawer","Box","activeClass","spy","smooth","duration","Menu","map","link","Drawer","anchor","open","onClose","List","index","ListItem","button","key","ListItemIcon","HomeRounded","EqualizerRounded","WorkRounded","Book","DirectionsRounded","ContactMailRounded","getIcon","ListItemText","primary","ProjectCard","imgSrc","desc","linkTxt","Paper","elevation","minHeight","flexDirection","height","objectFit","src","alt","padding","flex","overflow","fontWeight","fontSize","lineHeight","WebkitLineClamp","WebkitBoxOrient","textOverflow","marginTop","flexShrink","href","target","rel","ArticleCard","margin","m","Button","PacmanLoaderComponent","size","loading","HeroSection","heroSrc","mt","p","ml","titleDescription","flexFlowWrap","titleBtn","ml8","pr","BorderLinearProgress","withStyles","root","borderRadius","colorPrimary","bar","LinearProgress","skillsContent","skillBox","skillBoxConfidence","Skill","isLeft","skillName","confidenceLevel","isTablet","Chip","label","value","SkillsSection","justifyContentCenter","spacing","lg","ProjectsSection","sectionTitle","pt","sectionContent","ExperienceCard","icon","shortDesc","date","description","keyResponsibilities","contentStyle","background","contentArrowStyle","borderRight","iconStyle","responsibility","ExperienceSection","lineColor","FooterSection","articles","ArticlesSection","overflowX","overflowY","flexWrap","article","id","mb","mx10","marginRight","primaryDivider","textAlign","workCardPadding","flexFlow","maxWidth","gap","isLoading","setIsLoading","useEffect","setTimeout","afterLoaded","document","getElementById","loader","TopBar","name","Divider","createMuiTheme","palette","main","secondary","default","paper","typography","fontFamily","h1","h2","h3","h4","h5","h6","App","ThemeProvider","exact","route","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.697311cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.9f089f11.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Grid,\n  useMediaQuery,\n} from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n\nconst ArticleHeader = ({ title = \"\", backUrl = \"\" }) => {\n  const history = useHistory();\n\n  const isMobile = useMediaQuery(\"(max-width:600px)\");\n\n  return (\n    <AppBar position=\"fixed\" style={{ backgroundColor: \"#ffffff\" }}>\n      <Toolbar>\n        <Grid container>\n          <Grid\n            item\n            xs={4}\n            md={1}\n            style={{ display: \"flex\", alignItems: \"center\" }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                history.push(backUrl);\n              }}\n            >\n              <ArrowBackIcon color=\"secondary\" />\n              <Typography variant=\"h5\" color=\"secondary\">\n                Back\n              </Typography>\n            </div>\n          </Grid>\n          <Grid\n            item\n            xs={8}\n            md={10}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <Typography variant={isMobile ? \"h6\" : \"h4\"} color=\"primary\">\n              {title}\n            </Typography>\n          </Grid>\n          <Grid item xs={0} md={1} />\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nArticleHeader.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default ArticleHeader;\n","import SNN from \"./articles/SNN\";\nimport DNN from \"./articles/DNN\";\nimport CNN from \"./articles/CNN\";\nimport RNN1 from \"./articles/RNN1\";\nimport RNN2 from \"./articles/RNN2\";\n\nconst routes = [\n  {\n    path: \"/article/snn\",\n    component: SNN,\n  },\n  {\n    path: \"/article/dnn\",\n    component: DNN,\n  },\n  {\n    path: \"/article/cnn\",\n    component: CNN,\n  },\n  {\n    path: \"/article/rnn-1\",\n    component: RNN1,\n  },\n  {\n    path: \"/article/rnn-2\",\n    component: RNN2,\n  },\n];\n\nexport { routes };\n","// import PropTypes from 'prop-types';\nimport { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { CodeBlock, monoBlue } from \"react-code-blocks\";\nimport \"../../App.scss\";\nimport { ArticleHeader } from \"../common\";\n\nconst SNN = (props) => {\n  return (\n    <div>\n      <ArticleHeader title=\"Shallow Neural Network\" backUrl=\"/\" />\n      <div className=\"article-content\">\n        <Typography>Shallow Neural Network</Typography>\n        <Typography>Logistic Regression for Binary Classification</Typography>\n\n        <Typography>\n          let us say there are m examples for training. (x, y ) where x belongs\n          to R, y belongs to {(0, 1)}\n        </Typography>\n        <Typography>\n          Logistic Regression is given x, y^ = P(y = 1 | x)\n        </Typography>\n        <Typography>\n          Parameters: w belongs to R, b belongs to R Output: y^ = wT*x + b (for\n          Regression)\n        </Typography>\n        <Typography>\n          Output: y^ = sigmoid(wT*x + b) (for Classification)\n        </Typography>\n        <Typography>Sigmoid(z) = 1 / 1 + e**(-z)</Typography>\n        <Typography>Loss (error) function</Typography>\n        <Typography>\n          For simple functions: L(y^, y) = 1 / z * (y^ - y)**2\n        </Typography>\n        <Typography>\n          For logistic regression it becomes non convex, therefore it makes it\n          hard for gradient descent as there are multiple local maxima\n        </Typography>\n        <Typography>\n          L(y^, y) = -(y log(y^) + (1-y)log(1-y^)) (This will make it convex)\n        </Typography>\n        <Typography>Cost Function</Typography>\n        <Typography>J(w,b) = 1/m Sum(i = 1 to m) (L(y^(i), y(i)))</Typography>\n        <Typography>\n          J(w,b) = -1/m Sum(i = 1 to m) (-(y log(y^) + (1-y)log(1-y^)))\n        </Typography>\n        <Typography>Gradient Descent</Typography>\n        <Typography>w = w - alpha * (dJ(w,b)/dw)</Typography>\n        <Typography>b = b - alpha * (dJ(w,b)/db)</Typography>\n        <Typography>Logistic Regression Gradient Descent</Typography>\n        <Typography>z = wT*x +b</Typography>\n        <Typography>y^ = a = sigmoid(z)</Typography>\n        <Typography>L(a,y) = -(y log(y^) + (1-y)log(1-y^))</Typography>\n        <Typography>L(a,y) = -(y log(y^) + (1-y)log(1-y^))</Typography>\n        <Typography>da = -y/(a) + (1-y)/(1-a)</Typography>\n        <Typography>dz = a - y</Typography>\n        <Typography>\n          Logistic Regression for m examples (Pseudo Code)\n        </Typography>\n        <Typography>J = 0, dw1 = 0, dw2 = 0, db = 0</Typography>\n        <Typography>for i = 1 to m:</Typography>\n        <Typography> z(i) = wTx(i) + b</Typography>\n        <Typography> a(i) = sigmoid(z(i))</Typography>\n        <Typography>\n          {\" \"}\n          J += -[y(i)log(a(i)) + ((1 - y(i))(log(1 - a(i))))]{\" \"}\n        </Typography>\n        <Typography> for n features: </Typography>\n        <Typography> dz(i) = a(i) - y(i) </Typography>\n        <Typography> dw1 += x1(i) * dz(i) </Typography>\n        <Typography> dw2 += x2(i) * dz(i) </Typography>\n        <Typography> db += dz(i) </Typography>\n        <Typography>J /= m, dw1 /= m, dw2 /= m, db /= m</Typography>\n        <Typography>w1 = w1 - alpha(dw1)</Typography>\n        <Typography>w2 = w2 - alpha(dw2)</Typography>\n        <Typography>b = b - alpha(db)</Typography>\n        <Typography>Complexity = O(m * n)</Typography>\n        <Typography>We can make this O(1) by vectorizing</Typography>\n        <Typography>Vectorizing : </Typography>\n        <Typography>\n          [z(1), z(2), ... , z(m)] = [w1, w2,..., wn](1 * n)[X1, X2, ... Xm](n *\n          m) + b\n        </Typography>\n        <Typography>A = [a1, a2, ..., am]</Typography>\n        <Typography>Y = [y1, y2, ..., ym]</Typography>\n        <Typography>dz = A - Y</Typography>\n        <Typography>db = 1 / m (np.sum(dz))</Typography>\n        <Typography>dw = 1 / m (X * dzT)</Typography>\n        <Typography>w = w - alpha(dw)</Typography>\n        <Typography>b = b - alpha(db)</Typography>\n        <Typography variant=\"h5\">Shallow Neural Networks</Typography>\n        <Typography>\n          In linear regression z & a are calculated only once.\n        </Typography>\n        <Typography>\n          Whereas in a neural network they are calculated multiple times(i.e\n          they are calculated on each layer) & finally we calculate loss at end.\n        </Typography>\n        <Typography>Activation functions:</Typography>\n        <Typography>\n          Sigmoid, Tanh, ReLu, Leaky ReLu (Having Non linearity in activation\n          functions helps it solve complex problems)\n        </Typography>\n        <Typography>Gradient Descent & Back Prop</Typography>\n        <Typography>Z[1] = W[1]X + b[1] (X = A[0])</Typography>\n        <Typography>A[1] = g[1](Z[1])</Typography>\n        <Typography>Z[2] = W[2]X + b[2]</Typography>\n        <Typography>A[2] = g[2](Z[2])</Typography>\n        <Typography>Backprop:</Typography>\n        <Typography>dZ[2] = A[2] - Y</Typography>\n        <Typography>dW[2] = 1/m (dZ[2] * A[1]T)</Typography>\n        <Typography>db[2] = 1/m np.sum(dZ[2])</Typography>\n        <Typography>dZ[1] = W[2]T*dZ[2] * d(g[1])*(Z[1])</Typography>\n        <Typography>dW[1] = 1 / m * (dz[1]*XT)</Typography>\n        <Typography>db[1] = 1 / m * np.sum(dz[1])</Typography>\n        <Typography>\n          Initializing w & b to 0 doesn't work as it'll make it symmetric\n        </Typography>\n        <Typography>Parameters V/S Hyper parameters</Typography>\n        <Typography>\n          Parameters : w[1], b[1], w[2], b[2] - Model will learn\n        </Typography>\n        <Typography>\n          Hyper Parameters : Learning Rate(alpha), # iterations, # hidden\n          layers, # hidden units per layer, Choice of activation functions\n        </Typography>\n        <Typography>\n          Hyper parameters determine the final values of w & b\n        </Typography>\n        <Typography>\n          Other Hyper parameters : Momentum, Minibatch Size, Regularizations\n        </Typography>\n        <CodeBlock\n          text={`\n          model = tf.keras.Sequential([\n            tf.keras.layers.Dense(1)\n          ])\n\n          model.compile(loss=tf.keras.losses.mae,\n                        optimizer=tf.keras.optimizers.SGD(),\n                        metrics=[\"mae\"])\n\n          model.fit(tf.expand_dims(X, axis=-1), y, epochs=5)\n\n          model.predict([17.0])\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n      </div>\n    </div>\n  );\n};\n\nSNN.propTypes = {};\n\nexport default SNN;\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport { Typography } from \"@material-ui/core\";\nimport { CodeBlock, monoBlue } from \"react-code-blocks\";\n\nimport { ArticleHeader } from \"../common\";\n\nimport \"../../App.scss\";\n\nconst DNN = (props) => {\n  return (\n    <div>\n      <ArticleHeader title=\"Deep Neural Network\" backUrl=\"/\" />\n      <div className=\"article-content\">\n        <Typography>\n          Deep Neural Network Vectorized & Gradient Descent\n        </Typography>\n        <Typography className=\"mt-16\">Z[l] = W[l] * A[l-1] + b[l]</Typography>\n        <Typography className=\"mt-16\">A[l] = g[l](Z[l])</Typography>\n        <Typography className=\"mt-16\">\n          dZ[l] = A[l] - Y or ( W[l]T*dZ[l] * d(g[l])*(Z[l]))\n        </Typography>\n        <Typography>dW[l] = 1/m (dZ[l] * A[l - 1]T)</Typography>\n        <Typography>db[l] = 1/m np.sum(dZ[l])</Typography>\n        <Typography>w = w - alpha * (dw), b = b - alpha * (db)</Typography>\n\n        <Typography className=\"mt-16\">Regression example</Typography>\n        <CodeBlock\n          text={`\n          insurance_model_2 = tf.keras.Sequential([\n            tf.keras.layers.Dense(100),\n            tf.keras.layers.Dense(10),\n            tf.keras.layers.Dense(1)\n          ])\n\n          insurance_model_2.compile(loss=tf.keras.losses.mae,\n                                    optimizer=tf.keras.optimizers.Adam(),\n                                    metrics=['mae'])\n\n          history = insurance_model_2.fit(X_train, y_train, epochs=100, verbose=0)\n\n          insurance_model_2.evaluate(X_test, y_test)\n\n          insurance_model_2.summary()\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <CodeBlock\n          text={`\n          # summarize history for accuracy\n          plt.plot(history.history['accuracy'])\n          plt.plot(history.history['val_accuracy'])\n          plt.title('model accuracy')\n          plt.ylabel('accuracy')\n          plt.xlabel('epoch')\n          plt.legend(['train', 'test'], loc='upper left')\n          plt.show()\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <CodeBlock\n          text={`\n          # summarize history for loss\n          plt.plot(history.history['loss'])\n          plt.plot(history.history['val_loss'])\n          plt.title('model loss')\n          plt.ylabel('loss')\n          plt.xlabel('epoch')\n          plt.legend(['train', 'test'], loc='upper left')\n          plt.show()\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography className=\"mt-16\">Classification example</Typography>\n        <CodeBlock\n          text={`\n          model_1 = tf.keras.Sequential([\n            tf.keras.layers.Dense(1)\n          ])\n\n          model_1.compile(loss=tf.keras.losses.BinaryCrossentropy(),\n                          optimizer=tf.keras.optimizers.SGD(),\n                          metrics=['accuracy'])\n\n          model_1.fit(X, y, epochs=5)\n          model_1.evaluate(X, y)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n      </div>\n    </div>\n  );\n};\n\nDNN.propTypes = {};\n\nexport default DNN;\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport { Typography } from \"@material-ui/core\";\nimport { CodeBlock, monoBlue } from \"react-code-blocks\";\n\nimport { ArticleHeader } from \"../common\";\n\nimport \"../../App.scss\";\n\nconst CNN = (props) => {\n  return (\n    <div>\n      <ArticleHeader title=\"Convoluted Neural Network\" backUrl=\"/\" />\n      <div className=\"article-content\">\n        <Typography>Convoluted Neural Network</Typography>\n        <Typography className=\"mt-16\">\n          convolution on n x n image with f x f filters\n        </Typography>\n        <Typography>padding p with stride s</Typography>\n        <Typography>\n          floor((((n + 2p - f) / s) + 1), (((n + 2p - f) / s) + 1) )\n        </Typography>\n        <Typography> Same convolution v/s Valid convolution</Typography>\n        <CodeBlock\n          text={`\n          train_datagen = ImageDataGenerator(rescale=1./255)\n          valid_datagen = ImageDataGenerator(rescale=1./255)\n\n          train_dir = \"pizza_steak/train/\"\n          test_dir = \"pizza_steak/test/\"\n\n          train_data = train_datagen.flow_from_directory(train_dir,\n                                                         batch_size=32,\n                                                         target_size=(224, 224),\n                                                         class_mode=\"binary\",\n                                                         seed=42)\n\n          valid_data = valid_datagen.flow_from_directory(test_dir,\n                                                         batch_size=32,\n                                                         target_size=(224, 224),\n                                                         class_mode=\"binary\",\n                                                         seed=42)\n\n          model_1 = tf.keras.models.Sequential([\n            tf.keras.layers.Conv2D(filters=10,\n                                   kernel_size=3,\n                                   activation=\"relu\",\n                                   input_shape=(224, 224, 3)),\n            tf.keras.layers.Conv2D(10, 3, activation=\"relu\"),\n            tf.keras.layers.MaxPool2D(pool_size=2,\n                                      padding=\"valid\"),\n            tf.keras.layers.Conv2D(10, 3, activation=\"relu\"),\n            tf.keras.layers.Conv2D(10, 3, activation=\"relu\"),\n            tf.keras.layers.MaxPool2D(2),\n            tf.keras.layers.Flatten(),\n            tf.keras.layers.Dense(1, activation=\"sigmoid\")\n          ])\n\n          model_1.compile(loss=\"binary_crossentropy\",\n                        optimizer=tf.keras.optimizers.Adam(),\n                        metrics=[\"accuracy\"])\n\n          history_1 = model_1.fit(train_data,\n                                  epochs=5,\n                                  steps_per_epoch=len(train_data),\n                                  validation_data=valid_data,\n                                  validation_steps=len(valid_data))\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Multi Class Classification</Typography>\n        <CodeBlock\n          text={`\n          model_9 = Sequential([\n            Conv2D(10, 3, activation='relu', input_shape=(224, 224, 3)),\n            Conv2D(10, 3, activation='relu'),\n            MaxPool2D(),\n            Conv2D(10, 3, activation='relu'),\n            Conv2D(10, 3, activation='relu'),\n            MaxPool2D(),\n            Flatten(),\n            Dense(10, activation='softmax')\n          ])\n\n          # Compile the model\n          model_9.compile(loss=\"categorical_crossentropy\",\n                          optimizer=tf.keras.optimizers.Adam(),\n                          metrics=[\"accuracy\"])\n          history_9 = model_9.fit(train_data,\n            epochs=5,\n            steps_per_epoch=len(train_data),\n            validation_data=test_data,\n            validation_steps=len(test_data))\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n      </div>\n    </div>\n  );\n};\n\nCNN.propTypes = {};\n\nexport default CNN;\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport { Typography } from \"@material-ui/core\";\nimport { CodeBlock, monoBlue } from \"react-code-blocks\";\n\nimport { ArticleHeader } from \"../common\";\n\nimport \"../../App.scss\";\n\nconst RNN1 = (props) => {\n  return (\n    <div>\n      <ArticleHeader title=\"Recurrent Neural Network - NLP\" backUrl=\"/\" />\n      <div className=\"article-content\">\n        <Typography>Recurrent Neural Network - NLP</Typography>\n        <Typography className=\"mt-16\">Why not a Standard Network?</Typography>\n        <Typography className=\"mt-16\">\n          - Inputs & Outputs can be of different lengths in different examples -\n          Doesn't share features learned across different positions of text.\n        </Typography>\n        <CodeBlock\n          text={`\n          a<t> = y^<t> = g(wa[a<t-1>, x<t>] + ba)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Back propagation through time:</Typography>\n        <CodeBlock\n          text={`\n          L<t>(y^<t>, y<t>) = -y<t> log(y^<t>) - (1 - y<t>)log(1 - y^<t>)\n          L = Sum (t = 1 to Ty) L<t>(y^<t>, y<t>)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Types of RNNs:</Typography>\n        <Typography> - Many to Many (Tx = Ty)</Typography>\n        <Typography> - Many to One</Typography>\n        <Typography> - One to Many</Typography>\n        <Typography> - Many to Many (Tx != Ty)</Typography>\n        <Typography>Vanishing & Exploding Gradients</Typography>\n        <Typography>\n          {\" \"}\n          - It is difficult for RNN to remember over a large portion of text\n        </Typography>\n        <Typography>\n          {\" \"}\n          - Hard for error to back propagate over a large text\n        </Typography>\n        <Typography> - Not able to capture long range dependencies</Typography>\n        <Typography>GRU</Typography>\n        <CodeBlock\n          text={`\n          c<t> = a<t>\n          c~<t> = tanh(Wc[Phi * c<t - 1>, X<t>] + bc)\n          Phi(u) = sigmoid(Wu [c<t-1>, X<t>] + bu) #update\n          Phi(r) = sigmoid(Wr [c<t-1>, X<t>] + br) # relevance\n          c<t> = Phi(u) * c~<t> + (1 - Phi(u)) * c<t - 1>\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>LSTM</Typography>\n        <CodeBlock\n          text={`\n          c~<t> = tanh(Wc[a<t-1>, X<t>] + bc)\n          Phi(u) = sigmoid(Wn[a<t-1>, x<t>] + bc) #update\n          Phi(f) = sigmoid(Wf[a<t-1>, x<t>] + bf) #forget\n          Phi(o) = sigmoid(Wo[a<t-1>, x<t>] + bo) #output\n          c<t> = Phi(u) * c~<t> + Phi(f) * c<t-1>\n          a<t> = Phi(o) * c<t> or Phi(o) * tanh(c<t>)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Bi-directional RNN</Typography>\n        <CodeBlock\n          text={`\n            y^<t> = g(Wy[a(forward)<t>, a(backward)<t>] + by)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Deep RNN</Typography>\n        <Typography>{`Multiple layers of any one of the architecture and each y<t> connected to a fully connected layer at the end`}</Typography>\n        <Typography>Feature Representation: Word Embedding</Typography>\n        <Typography>t-SNE, Word2Vec, Negative Sampling, Glove</Typography>\n        <Typography>Text Vectorization</Typography>\n        <CodeBlock\n          text={`\n          import tensorflow as tf\n          from tensorflow.keras.layers import TextVectorization\n\n          text_vectorizer = TextVectorization(max_tokens=None,\n                                    standardize=\"lower_and_strip_punctuation\",\n                                    split=\"whitespace\",\n                                    ngrams=None,\n                                    output_mode=\"int\",\n                                    output_sequence_length=None)\n                                    # pad_to_max_tokens=True)\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <CodeBlock\n          text={`\n          from tensorflow.keras import layers\n          model_2_embedding = layers.Embedding(input_dim=max_vocab_length,\n                                               output_dim=128,\n                                               embeddings_initializer=\"uniform\",\n                                               input_length=max_length,\n                                               name=\"embedding_2\")\n\n          inputs = layers.Input(shape=(1,), dtype=\"string\")\n          x = text_vectorizer(inputs)\n          x = model_2_embedding(x)\n          # x = layers.LSTM(64, return_sequences=True)(x) # return vector for each word in the Tweet (you can stack RNN cells as long as return_sequences=True)\n          x = layers.LSTM(64)(x)\n          # x = layers.Dense(64, activation=\"relu\")(x) # optional dense layer on top of output of LSTM cell\n          outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n          model_2 = tf.keras.Model(inputs, outputs, name=\"model_2_LSTM\")\n\n\n          model_2.compile(loss=\"binary_crossentropy\",\n                optimizer=tf.keras.optimizers.Adam(),\n                metrics=[\"accuracy\"])\n\n          model_2.summary()\n\n          model_2_history = model_2.fit(train_sentences,\n            train_labels,\n            epochs=5,\n            validation_data=(val_sentences, val_labels),\n            callbacks=[create_tensorboard_callback(SAVE_DIR,\n                                                   \"LSTM\")])\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>GRU</Typography>\n        <CodeBlock\n          text={`\n          from tensorflow.keras import layers\n          model_3_embedding = layers.Embedding(input_dim=max_vocab_length,\n                                               output_dim=128,\n                                               embeddings_initializer=\"uniform\",\n                                               input_length=max_length,\n                                               name=\"embedding_3\")\n\n          # Build an RNN using the GRU cell\n          inputs = layers.Input(shape=(1,), dtype=\"string\")\n          x = text_vectorizer(inputs)\n          x = model_3_embedding(x)\n          # x = layers.GRU(64, return_sequences=True) # stacking recurrent cells requires return_sequences=True\n          x = layers.GRU(64)(x)\n          # x = layers.Dense(64, activation=\"relu\")(x) # optional dense layer after GRU cell\n          outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n          model_3 = tf.keras.Model(inputs, outputs, name=\"model_3_GRU\")\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Bi-directional RNN</Typography>\n        <CodeBlock\n          text={`\n          from tensorflow.keras import layers\n          model_4_embedding = layers.Embedding(input_dim=max_vocab_length,\n                                               output_dim=128,\n                                               embeddings_initializer=\"uniform\",\n                                               input_length=max_length,\n                                               name=\"embedding_4\")\n\n          # Build a Bidirectional RNN in TensorFlow\n          inputs = layers.Input(shape=(1,), dtype=\"string\")\n          x = text_vectorizer(inputs)\n          x = model_4_embedding(x)\n          # x = layers.Bidirectional(layers.LSTM(64, return_sequences=True))(x) # stacking RNN layers requires return_sequences=True\n          x = layers.Bidirectional(layers.LSTM(64))(x) # bidirectional goes both ways so has double the parameters of a regular LSTM layer\n          outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n          model_4 = tf.keras.Model(inputs, outputs, name=\"model_4_Bidirectional\")\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>Conv 1D</Typography>\n        <CodeBlock\n          text={`\n          from tensorflow.keras import layers\n          model_5_embedding = layers.Embedding(input_dim=max_vocab_length,\n                                               output_dim=128,\n                                               embeddings_initializer=\"uniform\",\n                                               input_length=max_length,\n                                               name=\"embedding_5\")\n\n          # Create 1-dimensional convolutional layer to model sequences\n          from tensorflow.keras import layers\n          inputs = layers.Input(shape=(1,), dtype=\"string\")\n          x = text_vectorizer(inputs)\n          x = model_5_embedding(x)\n          x = layers.Conv1D(filters=32, kernel_size=5, activation=\"relu\")(x)\n          x = layers.GlobalMaxPool1D()(x)\n          # x = layers.Dense(64, activation=\"relu\")(x) # optional dense layer\n          outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n          model_5 = tf.keras.Model(inputs, outputs, name=\"model_5_Conv1D\")\n\n          # Compile Conv1D model\n          model_5.compile(loss=\"binary_crossentropy\",\n                          optimizer=tf.keras.optimizers.Adam(),\n                          metrics=[\"accuracy\"])\n\n          # Get a summary of our 1D convolution model\n          model_5.summary()\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n      </div>\n    </div>\n  );\n};\n\nRNN1.propTypes = {};\n\nexport default RNN1;\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport { Typography } from \"@material-ui/core\";\nimport { CodeBlock, monoBlue } from \"react-code-blocks\";\n\nimport { ArticleHeader } from \"../common\";\n\nimport \"../../App.scss\";\n\nconst RNN2 = (props) => {\n  return (\n    <div>\n      <ArticleHeader\n        title=\"Recurrent Neural Network - Time series\"\n        backUrl=\"/\"\n      />\n      <div className=\"article-content\">\n        <Typography>Recurrent Neural Network - Time series</Typography>\n        <Typography className=\"mt-16\">Windowing</Typography>\n        <CodeBlock\n          text={`\n          HORIZON = 1\n          WINDOW_SIZE = 7\n\n          def get_labelled_windows(x, horizon=1):\n          \"\"\"\n          Creates labels for windowed dataset.\n\n          E.g. if horizon=1 (default)\n          Input: [1, 2, 3, 4, 5, 6] -> Output: ([1, 2, 3, 4, 5], [6])\n          \"\"\"\n          return x[:, :-horizon], x[:, -horizon:]\n\n          test_window, test_label = get_labelled_windows(tf.expand_dims(tf.range(8)+1, axis=0), horizon=HORIZON)\n          print(f\"Window: {tf.squeeze(test_window).numpy()} -> Label: {tf.squeeze(test_label).numpy()}\")\n\n\n          def make_windows(x, window_size=7, horizon=1):\n            window_step = np.expand_dims(np.arange(window_size+horizon), axis=0)\n            window_indexes = window_step + np.expand_dims(np.arange(len(x)-(window_size+horizon-1)), axis=0).T # create 2D array of windows of size window_size\n            windowed_array = x[window_indexes]\n            windows, labels = get_labelled_windows(windowed_array, horizon=horizon)\n            return windows, labels\n\n          full_windows, full_labels = make_windows(prices, window_size=WINDOW_SIZE, horizon=HORIZON)\n          len(full_windows), len(full_labels)\n\n          def make_train_test_splits(windows, labels, test_split=0.2):\n            split_size = int(len(windows) * (1-test_split))\n            train_windows = windows[:split_size]\n            train_labels = labels[:split_size]\n            test_windows = windows[split_size:]\n            test_labels = labels[split_size:]\n            return train_windows, test_windows, train_labels, test_labels\n\n          train_windows, test_windows, train_labels, test_labels = make_train_test_splits(full_windows, full_labels)\n          len(train_windows), len(test_windows), len(train_labels), len(test_labels)\n\n          import os\n\n          def create_model_checkpoint(model_name, save_path=\"model_experiments\"):\n            return tf.keras.callbacks.ModelCheckpoint(filepath=os.path.join(save_path, model_name),\n                                                      verbose=0,\n                                                      save_best_only=True)\n          import tensorflow as tf\n          from tensorflow.keras import layers\n\n          model_1 = tf.keras.Sequential([\n            layers.Dense(128, activation=\"relu\"),\n            layers.Dense(HORIZON, activation=\"linear\")\n          ], name=\"model_1_dense\")\n\n          model_1.compile(loss=\"mae\",\n                          optimizer=tf.keras.optimizers.Adam(),\n                          metrics=[\"mae\"])\n\n          model_1.fit(x=train_windows,\n                      y=train_labels,\n                      epochs=100,\n                      verbose=1,\n                      batch_size=128,\n                      validation_data=(test_windows, test_labels),\n                      callbacks=[create_model_checkpoint(model_name=model_1.name)])\n\n          model_1.evaluate(test_windows, test_labels)\n\n          def make_preds(model, input_data):\n            forecast = model.predict(input_data)\n            return tf.squeeze(forecast)\n\n          model_1_preds = make_preds(model_1, test_windows)\n          len(model_1_preds), model_1_preds[:10]\n\n\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n\n        <Typography>Windowing + LSTM</Typography>\n        <CodeBlock\n          text={`\n          inputs = layers.Input(shape=(WINDOW_SIZE))\n          x = layers.Lambda(lambda x: tf.expand_dims(x, axis=1))(inputs)\n          # x = layers.LSTM(128, activation=\"relu\", return_sequences=True)(x) # this layer will error if the inputs are not the right shape\n          x = layers.LSTM(128, activation=\"relu\")(x) # using the tanh loss function results in a massive error\n          # x = layers.Dense(32, activation=\"relu\")(x)\n          output = layers.Dense(HORIZON)(x)\n          model_5 = tf.keras.Model(inputs=inputs, outputs=output, name=\"model_5_lstm\")\n\n          model_5.compile(loss=\"mae\",\n                          optimizer=tf.keras.optimizers.Adam())\n\n          model_5.fit(train_windows,\n                      train_labels,\n                      epochs=100,\n                      verbose=0,\n                      batch_size=128,\n                      validation_data=(test_windows, test_labels),\n                      callbacks=[create_model_checkpoint(model_name=model_5.name)])\n          `}\n          language={\"python\"}\n          showLineNumbers={false}\n          theme={monoBlue}\n        />\n        <Typography>\n          Time Series prediction in an open system is very hard & unpredictable\n          as there are a lot of uncontrolled variables, whereas in a closed\n          environment where everything is controlled, Windowing + RNNs give good\n          results\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nRNN2.propTypes = {};\n\nexport default RNN2;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Box,\n  Typography,\n  Card,\n  CardMedia,\n  CardContent,\n  makeStyles,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  width90: {\n    width: \"90%\",\n  },\n  container: {\n    width: \"100%\",\n    marginBottom: \"4px\",\n  },\n}));\n\nconst JourneyCard = ({ index = 0, title = \"\", description = \"\", img = \"\" }) => {\n  const classes = useStyles();\n  return (\n    <Box mt={1} mb={1} style={{ width: \"90%\" }}>\n      <Card >\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"center\">\n            <div className={classes.container}>\n              <Typography variant=\"h5\" style={{ paddingBottom: \"8px\" }}>{title}</Typography>\n              <div\n                style={{\n                  float: index % 2 === 0 ? \"right\" : \"left\",\n                  width: \"130px\",\n                  height: \"100px\",\n                  margin: \"4px 8px 0px 8px\",\n                }}\n              >\n                <CardMedia\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  image={img}\n                  title=\"Live from space album cover\"\n                />\n              </div>\n              <Typography> {description}</Typography>\n            </div>\n          </Box>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nJourneyCard.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default JourneyCard;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-scroll\";\nimport {\n  AppBar,\n  Toolbar,\n  Box,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  makeStyles,\n  useMediaQuery,\n} from \"@material-ui/core\";\nimport {\n  HomeRounded,\n  EqualizerRounded,\n  WorkRounded,\n  DirectionsRounded,\n  ContactMailRounded,\n  Book,\n} from \"@material-ui/icons\";\nimport { Menu } from \"@material-ui/icons\";\n\nconst getIcon = (index) => {\n  switch (index) {\n    case 0: {\n      return <HomeRounded />;\n    }\n    case 1: {\n      return <EqualizerRounded />;\n    }\n    case 2: {\n      return <WorkRounded />;\n    }\n    case 3: {\n      return <Book />;\n    }\n    case 4: {\n      return <DirectionsRounded />;\n    }\n    case 5: {\n      return <ContactMailRounded />;\n    }\n    default: {\n      return <HomeRounded />;\n    }\n  }\n};\n\nconst links = [\n  // { to: \"home\", className: \"navbar-home\", title: \"Home\" },\n  {\n    to: \"skills\",\n    className: \"navbar-skills\",\n    title: \"Skills\",\n  },\n  { to: \"projects\", className: \"navbar-work\", title: \"Projects\" },\n  {\n    to: \"articles\",\n    className: \"navbar-home\",\n    title: \"Articles\",\n  },\n  {\n    to: \"experience\",\n    className: \"navbar-home\",\n    title: \"Experience & Education\",\n  },\n];\n\nconst useStyles = makeStyles(() => ({\n  cursorPointer: {\n    cursor: \"pointer\",\n  },\n  whiteBackground: {\n    backgroundColor: \"#ffffff\",\n    boxShadow: \"0 1px 3px rgba(30, 41, 59, 0.1)\",\n  },\n  navLinks: {\n    width: \"70%\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  navLinksThin: {\n    width: \"40%\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  navLinkText: {\n    marginLeft: \"20px\",\n    cursor: \"pointer\",\n  },\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const isMaxWidth600 = useMediaQuery(\"(max-width:600px)\");\n  const [showDrawer, setShowDrawer] = useState(false);\n\n  const toggleDrawer = () => {\n    setShowDrawer(!showDrawer);\n  };\n\n  return (\n    <>\n      <AppBar position=\"fixed\" className={classes.whiteBackground}>\n        <Toolbar>\n          <Box display=\"flex\" className=\"width-100-percent\">\n            <Box\n              className={\n                isMaxWidth600 ? \"width-60-percent\" : \"width-30-percent\"\n              }\n            >\n              <Link\n                activeClass=\"active\"\n                className=\"test1\"\n                to=\"home\"\n                spy={true}\n                smooth={true}\n                duration={500}\n              >\n                <Typography\n                  className={classes.cursorPointer}\n                  variant=\"h5\"\n                  color=\"primary\"\n                >\n                  PB Pranav Kumar\n                </Typography>\n              </Link>\n            </Box>\n            <Box\n              display=\"flex\"\n              className={\n                isMaxWidth600 ? classes.navLinksThin : classes.navLinks\n              }\n            >\n              {!isMaxWidth600 ? (\n                <>\n                  {links?.map((link) => (\n                    <Link\n                      activeClass=\"active\"\n                      className=\"test1\"\n                      to={link.to}\n                      spy={true}\n                      smooth={true}\n                      duration={500}\n                    >\n                      <Typography\n                        variant=\"h5\"\n                        color=\"secondary\"\n                        className={`${link.className} ${classes.navLinkText}`}\n                      >\n                        {link.title}\n                      </Typography>\n                    </Link>\n                  ))}\n                </>\n              ) : (\n                <Menu\n                  onClick={toggleDrawer}\n                  className={classes.cursorPointer}\n                  color={\"primary\"}\n                />\n              )}\n            </Box>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor={\"right\"} open={showDrawer} onClose={toggleDrawer}>\n        <Box className=\"width-250-px\">\n          <List>\n            {links.map(({ title, to }, index) => (\n              <Link\n                activeClass=\"active\"\n                className=\"test1\"\n                to={to}\n                onClick={toggleDrawer}\n                spy={true}\n                smooth={true}\n                duration={500}\n              >\n                <ListItem button key={title}>\n                  <ListItemIcon>{getIcon(index)}</ListItemIcon>\n                  <ListItemText primary={title} />\n                </ListItem>\n              </Link>\n            ))}\n          </List>\n        </Box>\n      </Drawer>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Paper, Box, Typography } from \"@material-ui/core\";\n\nconst ProjectCard = ({\n  className = \"\",\n  imgSrc,\n  title,\n  desc,\n  link,\n  linkTxt,\n}) => {\n  return (\n    <Paper className={className} variant=\"outlined\" elevation={3}>\n      <Box\n        style={{\n          width: \"280px\",\n          minHeight: \"400px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <img\n          style={{ height: \"160px\", width: \"100%\", objectFit: \"contain\" }}\n          src={`${imgSrc}`}\n          alt=\"text\"\n          className=\"paper_image\"\n        />\n        <Box\n          style={{\n            padding: \"12px\",\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflow: \"hidden\",\n            minHeight: 0,\n          }}\n        >\n          <Box style={{ flex: 1, overflow: \"hidden\", marginBottom: \"12px\" }}>\n            <Typography\n              variant=\"h6\"\n              color=\"primary\"\n              style={{\n                marginBottom: \"8px\",\n                fontWeight: 600,\n                fontSize: \"1rem\",\n                lineHeight: 1.3,\n                display: \"-webkit-box\",\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: \"vertical\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n              }}\n            >\n              {`${title}`}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              style={{\n                lineHeight: 1.4,\n                color: \"#64748b\",\n                fontSize: \"0.875rem\",\n                display: \"-webkit-box\",\n                WebkitLineClamp: 6,\n                WebkitBoxOrient: \"vertical\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n              }}\n            >\n              {`${desc}`}\n            </Typography>\n          </Box>\n          <Box style={{ marginTop: \"auto\", flexShrink: 0 }}>\n            <Typography variant=\"body2\">\n              <a\n                href={`${link}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue\"\n                style={{ fontWeight: 500, fontSize: \"0.875rem\" }}\n              >\n                {`${linkTxt}`}\n              </a>\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\n// import { useHistory } from \"react-router-dom\";\nimport { Paper, Box, Typography, Button } from \"@material-ui/core\";\n\nconst ArticleCard = ({ className = \"\", imgSrc, title, desc, link }) => {\n  // const history = useHistory();\n\n  // const handleClick = () => {\n  //   history.push(link);\n  // };\n\n  return (\n    <Paper\n      className={className}\n      style={{ margin: \"2%\" }}\n      variant=\"outlined\"\n      elevation={3}\n    >\n      <Box\n        style={{\n          width: \"375px\",\n        }}\n      >\n        <img\n          style={{ height: \"250px\", margin: \"4px\" }}\n          src={`${imgSrc}`}\n          alt=\"text\"\n          className=\"paper_image\"\n        />\n        <Box\n          m={1}\n          display=\"flex\"\n          style={{\n            height: \"175px\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Typography variant=\"h5\" color=\"primary\">\n            {`${title}`}\n          </Typography>\n          <Typography variant=\"body1\" style={{ marginTop: \"5px\" }}>\n            {`${desc}`}\n          </Typography>\n\n          <Box\n            display=\"flex\"\n            style={{\n              justifyContent: \"center\",\n              marginTop: \"5px\",\n              marginBottom: \"5px\",\n            }}\n          >\n            <Button variant=\"contained\" target=\"_blank\" href={link}>\n              Open Article\n            </Button>\n          </Box>\n        </Box>{\" \"}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default ArticleCard;\n","import React from \"react\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\n\nconst PacmanLoaderComponent = () => (\n  <PacmanLoader size={80} margin={0} color={\"#000000\"} loading={true} />\n);\n\nexport default PacmanLoaderComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Grid, Typography, Button } from \"@material-ui/core\";\nimport { Link } from \"react-scroll\";\n\nconst HeroSection = ({ isMaxWidth600 = false, classes = {}, heroSrc = \"\" }) => {\n  return (\n    <Box\n      mt={10}\n      p={isMaxWidth600 ? 2 : 0}\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Grid container component={Box}>\n        <Grid item md={7}>\n          <Box\n            ml={isMaxWidth600 ? 0 : 4}\n            display=\"flex\"\n            flexDirection=\"column\"\n            height=\"100%\"\n            justifyContent=\"center\"\n          >\n            <Typography variant=\"h6\" className={classes.title}>\n              I'm a Senior Machine Learning Engineer\n            </Typography>\n            <Typography variant=\"body1\" className={classes.titleDescription}>\n              Senior Machine Learning Engineer with 6+ years of experience\n              building scalable AI/ML systems from end to end. Strong foundation\n              in software engineering with a career progression from full-stack\n              development to ML platforms, technical leadership, and advanced ML\n              systems. Skilled in designing and deploying pipelines for data\n              ingestion, feature engineering, training, serving, evaluation, and\n              observability. Hands-on expertise with Python, Go, TensorFlow,\n              PyTorch, Vertex AI, and Kubernetes. Proven track record of\n              improving model accuracy, optimizing infrastructure costs, and\n              delivering measurable business impact across Ad Tech and AI-driven\n              products.\n            </Typography>\n            <Box display=\"flex\" className={classes.flexFlowWrap}>\n              <Link\n                activeClass=\"active\"\n                className=\"test1\"\n                to=\"projects\"\n                spy={true}\n                smooth={true}\n                duration={500}\n              >\n                <Button variant=\"contained\" className={classes.titleBtn}>\n                  Projects\n                </Button>\n              </Link>\n              <Button\n                variant=\"contained\"\n                className={`${classes.ml8} ${classes.titleBtn}`}\n                target=\"_blank\"\n                href=\"https://github.com/pbpranavk?tab=repositories\"\n              >\n                Github\n              </Button>\n              <Button\n                variant=\"contained\"\n                className={`${classes.ml8} ${classes.titleBtn}`}\n                target=\"_blank\"\n                href=\"https://www.kaggle.com/pranavcoder\"\n              >\n                Kaggle\n              </Button>\n              <Button\n                variant=\"contained\"\n                className={`${classes.ml8} ${classes.titleBtn}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://drive.google.com/file/d/1E6iwuN93IEgtSoUddEfpBgm5E3-Ee6pB/view?usp=sharing\"\n              >\n                My Resume\n              </Button>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item md={5}>\n          <Box\n            display=\"flex\"\n            mt={2}\n            pr={isMaxWidth600 ? 0 : 4}\n            justifyContent={isMaxWidth600 ? \"flex-start\" : \"flex-end\"}\n            alignItems=\"center\"\n            height=\"100%\"\n          >\n            <img style={{ width: \"90%\" }} src={heroSrc} alt=\"home\" />\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nHeroSection.propTypes = {\n  isMaxWidth600: PropTypes.bool,\n  classes: PropTypes.object,\n  heroSrc: PropTypes.string,\n};\n\nexport default HeroSection;\n","import React from \"react\";\nimport {\n  Box,\n  Typography,\n  LinearProgress,\n  useMediaQuery,\n  makeStyles,\n  Grid,\n  Chip,\n} from \"@material-ui/core\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 23,\n    borderRadius: 5,\n    width: \"100%\",\n  },\n  colorPrimary: {\n    backgroundColor: \"secondary\",\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#1e40af\",\n  },\n}))(LinearProgress);\n\nconst useStyles = makeStyles({\n  skillsContent: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  skillBox: {\n    width: \"50%\",\n    justifyContent: \"center\",\n  },\n  skillBoxConfidence: {\n    width: \"30%\",\n    justifyContent: \"center\",\n  },\n});\n\nconst Skill = ({ isLeft = false, skillName, confidenceLevel }) => {\n  const classes = useStyles();\n  const isMobile = useMediaQuery(\"(max-width:600px)\");\n  const isTablet = useMediaQuery(\"(max-width:1200px)\");\n\n  if (isMobile) {\n    return (\n      <div className=\"flex-justify-content-center\">\n        <Chip className=\"mx-8 mt-8\" label={skillName} />\n      </div>\n    );\n  }\n\n  return (\n    <Box\n      mt={4}\n      display=\"flex\"\n      className={`${classes.skillsContent} ${\n        isTablet\n          ? \"justify-content-center\"\n          : isLeft\n          ? \"justify-content-end\"\n          : \"justify-content-start\"\n      }`}\n    >\n      <Box display=\"flex\" className={\"width-85-percent\"} alignItems={\"center\"}>\n        <Box display=\"flex\" style={{ width: \"70%\" }}>\n          <Typography variant=\"h5\" color=\"secondary\">\n            {skillName}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" className={classes.skillBoxConfidence}>\n          <BorderLinearProgress variant=\"determinate\" value={confidenceLevel} />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst SkillsSection = ({ classes = { justifyContentCenter: \"\" } }) => {\n  const isMobile = useMediaQuery(\"(max-width:600px)\");\n\n  return (\n    <Box mt={10}>\n      <Box display=\"flex\" className={classes.justifyContentCenter}>\n        <Typography\n          variant=\"h3\"\n          style={{ fontWeight: \"bold\", fontSize: \"40px\" }}\n          color=\"primary\"\n        >\n          My Skills\n        </Typography>\n      </Box>\n      <Grid className=\"mt-16\" container={true} spacing={isMobile ? 0 : 4}>\n        <Grid item xs={12} lg={6}>\n          {/* <Skill\n            skillName=\"Scalable State Design\"\n            confidenceLevel={55}\n            isLeft={true}\n          /> */}\n          <Skill skillName=\"PyTorch\" confidenceLevel={85} isLeft={true} />\n\n          <Skill skillName=\"Tensorflow\" confidenceLevel={85} isLeft={true} />\n          <Skill\n            skillName=\"Vertex AI, Kubeflow & GCP\"\n            confidenceLevel={75}\n            isLeft={true}\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <Skill skillName=\"Python\" confidenceLevel={55} />\n          <Skill skillName=\"Go Lang\" confidenceLevel={75} />\n          <Skill\n            skillName=\"Data Structures & Algorithms\"\n            confidenceLevel={55}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default SkillsSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Typography } from \"@material-ui/core\";\n\nimport { ProjectCard } from \"../components\";\n\nconst ProjectsSection = ({ classes = {} }) => {\n  return (\n    <>\n      <Box mt={10}>\n        <Box display=\"flex\" className={classes.justifyContentCenter}>\n          <Typography\n            variant=\"h3\"\n            className={classes.sectionTitle}\n            color=\"primary\"\n          >\n            Projects\n          </Typography>\n        </Box>\n        <Box display=\"flex\" pt={4} className={classes.sectionContent}>\n          {/* <ProjectCard\n            imgSrc={\"react_animated_navbar.png\"}\n            title={\"Animated Navbar in React\"}\n            desc={\n              \"A Stripe style animated Navbar built with React, styled-components & react-flip library. \"\n            }\n            link={\"https://codesandbox.io/s/react-stripe-style-navbar-5r8x4\"}\n            linkTxt={\"View on CodeSandbox\"}\n          /> */}\n\n          {/* <ProjectCard\n            imgSrc={\"event_driven_arch.png\"}\n            title={\"Exploring react query\"}\n            desc={`A codesandbox where I go throught the well established API called react-query which can be used\n                     along with axios to retrieve data from a REST/GraphQL API. It can also mutate(POST, PUT, DEL) data in the DB`}\n            link={\"https://g658q.csb.app/\"}\n            linkTxt={\"View deployed version\"}\n          /> */}\n\n          <ProjectCard\n            imgSrc={\"spice_route.png\"}\n            title={\"SpiceRoute: AI-Powered Meal Planning System\"}\n            desc={`Designed an AI system that personalizes weekly meals, optimizes cooking schedules,\n              and auto-generates grocery lists using OR-Tools and LLMs. \n              Built backend with Go, Python, GCP, and Kubernetes; used Playwright to automate cart filling on \n              third-party platforms.`}\n            link={\"https://github.com/pbpranavk/spiceroute\"}\n            linkTxt={\"View on Github\"}\n          />\n\n          <ProjectCard\n            imgSrc={\"fraud_detect.png\"}\n            title={\"ML system - Fraud Detection\"}\n            desc={`Developed a scalable fraud detection system using Kubeflow Pipelines and Vertex AI, \n              inspired by real-world banking transaction alerts. Designed production-grade ML workflows \n              leveraging GCP services to detect anomalies in real-time financial data.`}\n            link={\"https://github.com/pbpranavk/fraud_detect\"}\n            linkTxt={\"View on Github\"}\n          />\n\n          <ProjectCard\n            imgSrc={\"price_predict.png\"}\n            title={\"ML System - Price Prediction\"}\n            desc={`Developed a price prediction system using Kubeflow Pipelines and Vertex AI, inspired \n              by real-world product pricing data. Designed production-grade ML \n              workflows leveraging GCP services to predict product prices in real-time.`}\n            link={\"https://github.com/pbpranavk/price_prediction\"}\n            linkTxt={\"View on Github\"}\n          />\n\n          {/* <ProjectCard\n            imgSrc={\"delhi_climate.jpeg\"}\n            title={\"Delhi Climate\"}\n            desc={`A time series model that models the climate patterns of Delhi based\n             on data from Jan 2013 to April 2017. I use windowing and LSTM to build\n              a predictive time series model.`}\n            link={\"https://www.kaggle.com/pranavcoder/delhi-climate\"}\n            linkTxt={\"View on Kaggle\"}\n          /> */}\n\n          {/* <ProjectCard\n            className={classes.ProjectCardPadding}\n            imgSrc={\"transfer_learning_img.jpeg\"}\n            title={\"Transfer Learning\"}\n            desc={`In this notebook, I use transfer learning to retrain\n            state-of-the-art Neural Networks on the required dataset to get\n            optimal results. The datasets I used are Fruit-Vegetable dataset for CNN and\n            News data for Text. I use MobileNet for transfer learning in CNN and\n            BERT for Text Model. I use Tensorflow for transfer learning.\n            `}\n            link={\"https://www.kaggle.com/pranavcoder/transfer-learning\"}\n            linkTxt={\"View on Kaggle\"}\n          /> */}\n\n          <ProjectCard\n            imgSrc={\"fin_agent_adk.png\"}\n            title={\"Tool Driven Agent with Google ADK\"}\n            desc={`Built a personal finance agent using Google's Agent Development Kit (ADK) and Vertex AI. \n              The agent autonomously processes bank statements, classifies transactions using LLMs, \n              updates Notion budgets, and sends monthly spending digests. Features intelligent budget \n              adjustments based on dining vs grocery spend patterns to encourage healthier habits. \n              Includes detailed documentation on implementing tool-driven agents with ADK and deploying \n              on Vertex AI.`}\n            link={\"https://github.com/pbpranavk/finance_agent_adk\"}\n            linkTxt={\"View on Github\"}\n          />\n\n          <ProjectCard\n            imgSrc={\"fine_tune.png\"}\n            title={\"fine-tuned a LLaMA on Vertex AI\"}\n            desc={`Fine-tuned LLaMA-2-3B (~3B parameters) on Vertex AI using QLoRA and TorchTune \n              for just $10, achieving strong performance on targeted tasks despite being smaller than \n              foundation models. Implemented automated retraining pipeline with Kubeflow to keep the model \n              updated with latest data trends.`}\n            link={\n              \"https://www.linkedin.com/pulse/i-fine-tuned-llama-vertex-ai-using-torchtune-10-pranav-kumar-pb-8mgic\"\n            }\n            linkTxt={\"Read on LinkedIn\"}\n          />\n\n          <ProjectCard\n            imgSrc={\"drift_detect.png\"}\n            title={\"Handling Drift in ML Systems\"}\n            desc={`Built a production-ready drift detection system for ML models using Python, FastAPI, \n              Docker and Kubernetes. The system monitors model performance, detects data/concept drift, \n              and automatically triggers retraining when needed. Includes detailed implementation of \n              statistical drift detection methods, A/B testing framework, and automated model retraining \n              pipeline. The article explains core concepts of drift in ML systems with focus on \n              recommendation engines.`}\n            link={\"https://github.com/pbpranavk/handle_drift_recsys\"}\n            linkTxt={\"View on Github\"}\n          />\n\n          {/* <ProjectCard\n            imgSrc={\"event_driven_arch.png\"}\n            title={\"A full stack application with MERN, PyTorch and FastAPI\"}\n            desc={`A full stack project where the Frontend is written in React.\n            The Backend consists of two micro-services where one acts as the gateway.\n            The gateway service is an Express service with TypeORM acting as an ORM\n            abstraction for MYSQL. It is a TODOs application which serves REST APIs. The FastAPI microservice is\n            a single endpoint service which gets data and determines if a person has diabetes or not. The\n            model is trained in PyTorch on Pima Indian Diabetes dataset.\n                `}\n            link={\"https://github.com/pbpranavk/mern_pyth\"}\n            linkTxt={\"Check it out on Github\"}\n          /> */}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nProjectsSection.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default ProjectsSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport {\n  VerticalTimeline,\n  VerticalTimelineElement,\n} from \"react-vertical-timeline-component\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport StarIcon from \"@material-ui/icons/Star\";\n\nimport \"react-vertical-timeline-component/style.min.css\";\n\n// import { JourneyCard } from \"../components\";\n\nconst ExperienceCard = ({\n  icon = <></>,\n  title = \"\",\n  shortDesc = \"\",\n  date = \"\",\n  description = \"\",\n  keyResponsibilities = [],\n}) => {\n  return (\n    <VerticalTimelineElement\n      className=\"vertical-timeline-element--work\"\n      contentStyle={{ background: \"#1e40af\", color: \"#fff\" }}\n      contentArrowStyle={{ borderRight: \"7px solid #1e40af\" }}\n      date={date}\n      iconStyle={{ background: \"#1e40af\", color: \"#fff\" }}\n      icon={icon}\n    >\n      <h3 className=\"vertical-timeline-element-title\">{title}</h3>\n      <h4 className=\"vertical-timeline-element-subtitle\">{`${shortDesc} ${date}`}</h4>\n      <p>{description} </p>\n      <p>Key responsibilities include:</p>\n      <ul className=\"experience-ul\" style={{ marginTop: \"0px\" }}>\n        {keyResponsibilities?.map((responsibility) => (\n          <li>{responsibility}</li>\n        ))}\n      </ul>\n    </VerticalTimelineElement>\n  );\n};\n\nconst ExperienceSection = ({ classes = {} }) => {\n  return (\n    <Box mt={10}>\n      <Box display=\"flex\" className={classes.justifyContentCenter}>\n        <Typography\n          variant=\"h3\"\n          className={classes.sectionTitle}\n          color=\"primary\"\n        >\n          Experience & Education\n        </Typography>\n      </Box>\n      <VerticalTimeline lineColor={\"#1e293b\"}>\n        <ExperienceCard\n          icon={<WorkIcon />}\n          title={\"Senior Machine Learning Engineer\"}\n          shortDesc={\"Beautiful Code LLC\"}\n          date={\"(Nov 2024 – Present)\"}\n          description={\n            \"Designed and scaled production-grade ML pipelines and infrastructure, improving accuracy, efficiency, and observability for high-volume Ad Tech systems.\"\n          }\n          keyResponsibilities={[\n            \"Rewrote all ML pipelines and models (Prospecting, Destinations, Retargeting, Reactivation) to combine embeddings with numeric features, achieving 92% accuracy in both online and offline performance.\",\n            \"Engineered a modular Go library for feature extraction, reducing pipeline complexity by 40% and enabling reuse across batch and real-time inference.\",\n            \"Developed observability dashboards (MAP, latency, conversion metrics), empowering analysts/PMs to measure performance without engineering help.\",\n            \"Optimized infra costs by ~15% while scaling to billions of records.\",\n          ]}\n        />\n        <ExperienceCard\n          icon={<WorkIcon />}\n          title={\"Technical Lead\"}\n          shortDesc={\"Beautiful Code LLC\"}\n          date={\"(June 2023 – Dec 2024)\"}\n          description={\n            \"Led cross-functional teams across geographies to deliver AI-first platforms, integrating Generative AI with robust system architecture and user-facing applications.\"\n          }\n          keyResponsibilities={[\n            \"Directed a distributed team (US & India) to launch an AI-first platform in under 8 months, boosting adoption by 20%.\",\n            \"Integrated GenAI RAG (OpenAI + LangChain) into the platform, increasing user engagement by 22%.\",\n            \"Oversaw service architecture, database design, and React/Supabase frontend.\",\n          ]}\n        />\n        <VerticalTimelineElement\n          className=\"vertical-timeline-element--education\"\n          date=\"Aug 2022 - Dec 2023\"\n          iconStyle={{ background: \"#059669\", color: \"#fff\" }}\n          icon={<SchoolIcon />}\n        >\n          <h3 className=\"vertical-timeline-element-title\">\n            Masters in Artificial Intelligence from University of Cincinnati\n          </h3>\n          <h4 className=\"vertical-timeline-element-subtitle\">\n            CGPA: 3.9 / 4.0\n          </h4>\n          <p>\n            Subjects Taken: Deep Learning, Intelligent Systems, Applied AI & ML\n            tools, Venture Capital & Strategy, Distributed Systems\n          </p>\n        </VerticalTimelineElement>\n\n        <ExperienceCard\n          icon={<WorkIcon />}\n          title={\"Senior Software Engineer\"}\n          shortDesc={\"Beautiful Code LLP\"}\n          date={\"(May 2021 – Jul 2022)\"}\n          description={\n            \"Owned the design and development of ML platform capabilities, enabling seamless training, deployment, and real-time use of models within distributed systems.\"\n          }\n          keyResponsibilities={[\n            \"Built an ML platform enabling applied scientists & PMs to train, host, and serve models with real-time inference, reducing time for PMs to generate model-driven segments by 40%.\",\n            \"Designed APIs, schemas, Redis queues, and caching, reducing latency by 30% and increasing throughput by 25%.\",\n          ]}\n        />\n        <ExperienceCard\n          icon={<WorkIcon />}\n          title={\"Software Engineer\"}\n          shortDesc={\"Beautiful Code LLP\"}\n          date={\"(June 2019 – May 2021)\"}\n          description={\n            \"Developed full-stack enterprise applications and internal tools, delivering scalable systems that improved business workflows and user experience.\"\n          }\n          keyResponsibilities={[\n            \"Delivered full-stack audience & campaign management system (React + Django) scaling to 3,000 DAUs.\",\n            \"Built an internal HR tool to streamline and enable effective performance reviews.\",\n          ]}\n        />\n        <ExperienceCard\n          icon={<WorkIcon />}\n          title={\"Associate Engineer\"}\n          shortDesc={\"Kony IT Professional Services Ltd\"}\n          date={\"(June 2018 – June 2019)\"}\n          description={\n            \"Contributed to mobile banking application development, building reliable customer-facing features and improving app stability for large-scale daily use.\"\n          }\n          keyResponsibilities={[\n            \"Developed mobile banking features (FDs, RDs, notifications), improving stability by 80%.\",\n          ]}\n        />\n        <VerticalTimelineElement\n          className=\"vertical-timeline-element--education\"\n          date=\"2015 - 2019\"\n          iconStyle={{ background: \"#059669\", color: \"#fff\" }}\n          icon={<SchoolIcon />}\n        >\n          <h3 className=\"vertical-timeline-element-title\">\n            Bachelor of Technology in Computer science and Engineering\n          </h3>\n          <h4 className=\"vertical-timeline-element-subtitle\">\n            CGPA: 3.3 / 4.0\n          </h4>\n          <p>\n            Subjects Taken: Python Programming, Data Structures & Algorithms,\n            OOP, Design Patterns, OS, CN, Data Visualisation & Analysis\n          </p>\n        </VerticalTimelineElement>\n        <VerticalTimelineElement\n          iconStyle={{ background: \"#1e3a8a\", color: \"#fff\" }}\n          icon={<StarIcon />}\n        />\n      </VerticalTimeline>\n    </Box>\n  );\n};\n\nExperienceSection.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default ExperienceSection;\n","import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport { Button } from \"@material-ui/core\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\n\nconst FooterSection = (props) => {\n  return (\n    <div className=\"flex footer mt-24\">\n      <Button\n        href=\"https://github.com/pbpranavk/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <GitHubIcon className=\"footer-icon margin-right-10px wheat-color\" />\n      </Button>\n      <Button\n        href=\"https://twitter.com/pbpranav24/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <TwitterIcon className=\"footer-icon margin-right-10px wheat-color\" />\n      </Button>\n      <Button\n        href=\"https://www.linkedin.com/in/p-b-pranav-kumar/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <LinkedInIcon className=\"footer-icon wheat-color\" />\n      </Button>\n    </div>\n  );\n};\n\nFooterSection.propTypes = {};\n\nexport default FooterSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Typography } from \"@material-ui/core\";\n\nimport { ArticleCard } from \"../components\";\n\nconst articles = [\n  {\n    key: 1,\n    imgSrc: \"snn.svg\",\n    title: \"Foundations of Neural Nets\",\n    desc: `This article covers how to build a very basic Neural Network\n            with layers and activation function.\n            `,\n    link: \"https://www.linkedin.com/pulse/foundations-neural-nets-pranav-kumar-pb/\",\n  },\n  {\n    key: 2,\n    imgSrc: \"dnn.svg\",\n    title: \"Deep Neural Nets & Improving them\",\n    desc: `Extending Shallow neural nets to multiple hidden layers\n  and improving their accuracy`,\n    link: \"https://www.linkedin.com/pulse/deep-neural-nets-improving-them-pranav-kumar-pb/\",\n  },\n  {\n    key: 3,\n    imgSrc: \"cnn.svg\",\n    title: \"Convolutions-Pooling-Flattening\",\n    desc: `Using Convolutions and pooling to build Neural Networks that can\n            deal better with image data.`,\n    link: \"https://www.linkedin.com/pulse/convolutions-pooling-flattening-pranav-kumar-pb/\",\n  },\n  {\n    key: 4,\n    imgSrc: \"rnn-1.svg\",\n    title: \"Backprop through time\",\n    desc: `Using Memory (LSTM & GRUs) Networks and Word2Vec to work on NLP Tasks`,\n    link: \"https://www.linkedin.com/pulse/backprop-through-time-pranav-kumar-pb/\",\n  },\n  // {\n  //   key: 5,\n  //   imgSrc: \"rnn-2.svg\",\n  //   title: \"Recurrent Neural Network for Time Series\",\n  //   desc: `Using windowing and Memory (LSTM & GRUs) to work with time series data`,\n  //   link: \"/article/rnn-2\",\n  // },\n];\n\nconst ArticlesSection = ({ classes = {} }) => {\n  return (\n    <>\n      <Box mt={10}>\n        <Box display=\"flex\" className={classes.justifyContentCenter}>\n          <Typography\n            variant=\"h3\"\n            className={classes.sectionTitle}\n            color=\"primary\"\n          >\n            Articles\n          </Typography>\n        </Box>\n        <Box\n          display=\"flex\"\n          className={`${classes.sectionContent} article-container`}\n          style={{\n            overflowX: \"auto\",\n            overflowY: \"hidden\",\n            height: \"520px\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"flex-start\",\n            width: \"95%\",\n            margin: \"auto\",\n          }}\n        >\n          {articles?.map((article) => (\n            <ArticleCard\n              id={article?.key}\n              imgSrc={article?.imgSrc}\n              title={article?.title}\n              desc={article?.desc}\n              link={article?.link}\n            />\n          ))}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nArticlesSection.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default ArticlesSection;\n","import React, { useState, useEffect } from \"react\";\nimport { Element } from \"react-scroll\";\nimport { Box, Divider, useMediaQuery, makeStyles } from \"@material-ui/core\";\nimport { TopBar, PacmanLoader } from \"./components\";\nimport {\n  HeroSection,\n  SkillsSection,\n  ProjectsSection,\n  ExperienceSection,\n  FooterSection,\n  ArticlesSection,\n} from \"./sections\";\n// import ArticlesList from \"../blog/ArticlesList\";\n\nimport heroSrc from \"../assets/hero.png\";\nimport \"../App.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n  mt: {\n    marginTop: \"8px\",\n  },\n  mb: {\n    marginBottom: \"8px\",\n  },\n  ml8: { marginLeft: \"8px\" },\n  mx10: {\n    marginRight: \"5%\",\n    marginLeft: \"5%\",\n  },\n  primaryDivider: {\n    backgroundColor: \"#1e40af\",\n  },\n  textAlign: {\n    textAlign: \"justify\",\n  },\n  workCardPadding: {},\n  title: {\n    color: \"#1e293b\",\n    fontSize: \"35px\",\n  },\n  titleDescription: {\n    color: \"#64748b\",\n    fontSize: \"28px\",\n    marginTop: \"10px\",\n  },\n  flexFlowWrap: {\n    flexFlow: \"wrap\",\n  },\n  titleBtn: {\n    marginTop: \"40px\",\n    backgroundColor: \"#1e40af\",\n    color: \"#ffffff\",\n    \"&:hover\": {\n      backgroundColor: \"#1e3a8a\",\n    },\n  },\n  justifyContentCenter: {\n    justifyContent: \"center\",\n  },\n  sectionTitle: {\n    fontWeight: \"bold\",\n    fontSize: \"40px\",\n  },\n  sectionContent: {\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    maxWidth: \"900px\",\n    margin: \"0 auto\",\n    gap: \"20px\",\n  },\n}));\n\nconst Home = (props) => {\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(true);\n  const isMaxWidth600 = useMediaQuery(\"(max-width:600px)\");\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n      const afterLoaded = document.getElementById(\"after-loader\");\n      if (afterLoaded) {\n        afterLoaded.className = \"after-loaded-visible\";\n      }\n      const loader = document.getElementById(\"loader\");\n      if (loader) {\n        loader.className = \"display-none\";\n      }\n    }, 1500);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isLoading && (\n        <div className=\"loader\" id=\"loader\">\n          <PacmanLoader />\n        </div>\n      )}\n      <div style={{ maxWidth: \"1440px\", margin: \"auto\" }}>\n        <TopBar />\n        <Box>\n          <Element name=\"home\">\n            <HeroSection\n              isMaxWidth600={isMaxWidth600}\n              classes={classes}\n              heroSrc={heroSrc}\n            />\n          </Element>\n\n          <Element name=\"skills\">\n            <SkillsSection classes={classes} />\n          </Element>\n\n          <Element name=\"projects\">\n            <ProjectsSection classes={classes} />\n          </Element>\n\n          <Element name=\"articles\">\n            <ArticlesSection classes={classes} />\n          </Element>\n\n          <Element name=\"experience\">\n            <ExperienceSection classes={classes} />\n          </Element>\n        </Box>\n      </div>\n      <Divider />\n      <FooterSection />\n    </div>\n  );\n};\n\nHome.propTypes = {};\n\nexport default Home;\n","import React from \"react\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { routes } from \"./blog/article.routes\";\nimport Home from \"./home/Home\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#1e40af\" },\n    secondary: { main: \"#64748b\" },\n    background: {\n      default: \"#f8fafc\",\n      paper: \"#ffffff\",\n    },\n    text: {\n      primary: \"#1e293b\",\n      secondary: \"#64748b\",\n    },\n  },\n  typography: {\n    fontFamily:\n      '\"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif',\n    h1: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n    h2: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n    h3: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n    h4: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n    h5: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n    h6: {\n      fontFamily:\n        '\"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      fontWeight: 600,\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home />\n          </Route>\n          {routes?.map((route) => (\n            <Route path={route.path} exact={true}>\n              {route.component}\n            </Route>\n          ))}\n          <Route path=\"*\" exact={true}>\n            Not found\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}